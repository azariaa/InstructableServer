start_symbol,START{0},**skip**,0 **skip**
not_a_real_word,UnknownCommand{0},**skip**,0 **skip**
"send","S{0}","(sendEmail)","0 sendEmail"
"send","S{0}/InstanceName","(lambda $1 (send $1))" //send the email
"send","S{0}/ConceptName","(lambda $1 (send $1))" //send an email, actually means create an instance of concept email, and send it.
reset, S{0}/InstanceName,"(lambda $1 (reset $1))"
"reset email and password", S{0}, (resetEmailAndPassword)
"reset password", S{0}, (resetEmailAndPassword)
"reset username and password", S{0}, (resetEmailAndPassword)
yes,S{0},(yes)
no,S{0},(no)
end,S{0},(end)
stop,S{0},(endOrCancel)
quit,S{0},(cancel)
teach,S{0},(teachNewCommand)
teach,(S{0}/Command{1}){0}, (lambda $1 (teachNewCommand))
teach,(S{0}/StringV{1}){0}, (lambda $1 (teachNewCommand)) //users many times add information to this command, but it is ignored
teach,(S{0}/S{1}){0}, (lambda $1 (teachNewCommand)) //teach new command
undo,S{0},(undo)
undo_command,(S{0}/Command{1}){0},(undo)
undo_command,(S{0}/LastLearned{1}){0},(removeLastLearnedCommand)
next,S{0}/InstanceName{1},(lambda $1 (next $1))
previous,S{0}/InstanceName{1},(lambda $1 (previous $1))
newest,S{0}/InstanceName{1},(lambda $1 (newest $1))
"compose","(S{0}/EmailAmbiguous{1}){0}","(lambda $1 (createInstanceEmail $1))","0 createInstanceEmail","createInstanceEmail 1 1"
"create","(S{0}/EmailAmbiguous{1}){0}","(lambda $1 (createInstanceEmail $1))","0 createInstanceEmail","createInstanceEmail 1 1"
compose,((S{0}/StringN{2}){0}/ConceptName{1}), (lambda $1 $2 (createInstanceByFullNames $1 $2))
create,((S{0}/StringN{2}){0}/ConceptName{1}), (lambda $1 $2 (createInstanceByFullNames $1 $2))
create,((S{0}/PP_ConceptName{2}){0}/StringN{1}), (lambda $1 $2 (createInstanceByFullNames $2 $1))
create,(S{0}/StringN{1}){0},"(lambda $1 (defineConcept $1))"
create,(S{0}/Command{1}){0}, (lambda $1 (teachNewCommand)) //create a command
define,(S{0}/StringN{1}){0},"(lambda $1 (defineConcept $1))"
add,((S{0}/PP_ConceptName{2}){0}/StringN{1}), (lambda $1 $2 (addFieldToConcept $2 $1))
#add,(S{0}/StringN{1}){0}, (lambda $1 (addToWhat $1))
add,((S{0}/PP_MutableField{2}){0}/StringV{1}), (lambda $1 $2 (addToFieldFromString $2 $1))
add,((S{0}/PP_MutableField{2}){0}/FieldVal{1}), (lambda $1 $2 (addToFieldFromFieldVal $2 $1))
remove,((S{0}/PP_ConceptName{2}){0}/FieldName{1}), (lambda $1 $2 (removeFieldFromConcept $2 $1))
remove,(S{0}/Instance{1}){0}, (lambda $1 (deleteInstance $1)) //we may want to allow deleting only ExactInstance
undefine,(S{0}/ConceptName{1}){0}, (lambda $1 (undefineConcept $1)) ////this is very drastic, so only if uses word undefine (not remove)
has,((S{0}\ConceptName{2}){0}/StringN{1}), (lambda $1 $2 (addFieldToConcept $2 $1))
what,(S{0}/Field{1}){0},(lambda $1 (evalField $1)) //for some reason, when this was "read", it parsed "read email" to this
read,(S{0}/Instance{1}){0},(lambda $1 (readInstance $1)) //Instance seems to always be immutable 
take,(FieldVal{0}/Field{1}){0},(lambda $1 (evalField $1))
write,"((S{0}/PP_MutableField{2}){0}/StringV{1}){0}","(lambda $1 $2 (setFieldFromString $2 $1))","0 setFieldFromString","setFieldFromString 1 1","setFieldFromString 2 2"// write hello world in the subject
write,"((S{0}/PP_MutableField{2}){0}/FieldVal{1}){0}","(lambda $1 $2 (setFieldFromFieldVal $2 $1))","0 setFieldFromFieldVal","setFieldFromFieldVal 1 1","setFieldFromFieldVal 2 2"
#write, (S{0}/StringV{1}){0},(lambda $1 (setWhatFromString $1))
#write, (S{0}/Field{1}){0},(lambda $1 (setWhatFromField $1))
change,"((S{0}/PP_FieldVal{2}){0}/MutableField{1}){0}","(lambda $1 $2 (setFieldFromFieldVal $1 $2))","0 setFieldFromFieldVal","setFieldFromFieldVal 1 1","setFieldFromFieldVal 2 2" //change recipient to mom's email
change,"((S{0}/PP_StringV{2}){0}/MutableField{1}){0}","(lambda $1 $2 (setFieldFromString $1 $2))","0 setFieldFromString","setFieldFromString 1 1","setFieldFromString 2 2" //change subject to hello world
change,((S{0}/StringV{2}){0}/MutableField{1}){0},(lambda $1 $2 (setFieldFromString $1 $2)) //set contact mom fds@fds.com //not clean, but is used by users.
change,((S{0}/FieldVal{2}){0}/MutableField{1}){0},(lambda $1 $2 (setFieldFromFieldVal $1 $2)) //set recipient mom's email //not clean, but is used by users.
#change,(S{0}/MutableField{1}){0},(lambda $1 (setFieldWithMissingArg $1)) //change mom's email (without to "hello world)
goes,"((S{0}/PP_MutableField{2}){0}\StringV{1})",(lambda $1 $2 (setFieldFromString $2 $1)) //hello world goes in the subject
goes,"((S{0}/PP_MutableField{2}){0}\FieldVal{1}){0}",(lambda $1 $2 (setFieldFromFieldVal $2 $1)) //mom's email goes in the subject
of,((Field{0}\FieldName{2}){0}/ExactInstance{1}){0},(lambda $1 $2 (getFieldFromInstance $1 $2))
of,((MutableField{0}\FieldName{2}){0}/ExactInstance{1}){0},(lambda $1 $2 (getFieldFromInstance $1 $2))
"of","((Field{0}\FieldName{2}){0}/InstanceName{1}){0}","(lambda $1 $2 (getProbFieldByInstanceNameAndFieldName $1 $2))","0 getProbFieldByInstanceNameAndFieldName","getProbFieldByInstanceNameAndFieldName 1 1","getProbFieldByInstanceNameAndFieldName 2 2"
of,((MutableField{0}\FieldName{2}){0}/InstanceName{1}){0},(lambda $1 $2 (getProbMutableFieldByInstanceNameAndFieldName $1 $2))
"from","((Field{0}\FieldName{2}){0}/InstanceName{1}){0}","(lambda $1 $2 (getProbFieldByInstanceNameAndFieldName $1 $2))","0 getProbFieldByInstanceNameAndFieldName","getProbFieldByInstanceNameAndFieldName 1 1","getProbFieldByInstanceNameAndFieldName 2 2"
's,((Field{0}\ExactInstance{2}){0}/FieldName{1}){0},(lambda $1 $2 (getFieldFromInstance $2 $1))
's,((MutableField{0}\ExactInstance{2}){0}/FieldName{1}){0},(lambda $1 $2 (getFieldFromInstance $2 $1))
's,((Field{0}\InstanceName{2}){0}/FieldName{1}){0},(lambda $1 $2 (getProbFieldByInstanceNameAndFieldName $2 $1))
's,((MutableField{0}\InstanceName{2}){0}/FieldName{1}){0},(lambda $1 $2 (getProbMutableFieldByInstanceNameAndFieldName $2 $1))
is,"((S{0}/StringV{2}){0}\MutableField{1}){0}",(lambda $1 $2 (setFieldFromString $1 $2)) //the subject is hello world
is,"((S{0}/FieldVal{2}){0}\MutableField{1}){0}",(lambda $1 $2 (setFieldFromFieldVal $1 $2)) //the recipient is mom's email
is,"((S{0}/ConceptName{2}){0}\StringN{1})", (lambda $1 $2 (createInstanceByFullNames $2 $1)) //mom is a contact
it,FieldVal{0},(getProbFieldVal),0 getProbFieldVal
it,Instance{0},(getProbInstance) //treating it as a non-exact instance. since we don't want to allow access its fields or delete it.
its,(Field{0}/FieldName{1}){0},(lambda $1 (getProbFieldByFieldName $1))
its,(MutableField{0}/FieldName{1}){0},(lambda $1 (getProbMutableFieldByFieldName $1))
to,PP_StringV/StringV,(lambda $1 $1) //set subject to hello world
to,PP_FieldVal/FieldVal,(lambda $1 $1) //set recipient to mom's email
#to,PP_Field/Field,(lambda $1 $1) //?
to,PP_MutableField/MutableField,(lambda $1 $1) // add/write fds@df.com to the recipient list //this causes trouble for set recipient to sender (system sometimes tries to set sender to recipient)
to,PP_ConceptName/ConceptName,(lambda $1 $1)//add email to contact
as,PP_StringV/StringV,(lambda $1 $1) //set subject as hello world //set subject to hello world //not so good
#as,PP_FieldVal/FieldVal,(lambda $1 $1) //set recipient as mom's email //set recipient to mom's email //bad - removed
as,PP_ConceptName/ConceptName,(lambda $1 $1) //set mom as a contact
inside,PP_MutableField/MutableField,(lambda $1 $1) //put hello world inside the subject
and,"(S{3}/S{2})\S{1}",(lambda $1 $2 (doSeq $1 $2)) //regular and (has a sentence ahead and sentence behind).
#and,"(S/S)\FieldVal",(lambda $1 $2 (doSeq $1 $2)) // not sure what this is, is this a mistake?
#and,"((((S{3}\((S{3}/PP_StringV{2}){3}/MutableField{1}){3}){3})\((S{3}\((S{3}/PP_StringV{2}){3}/MutableField{1}){3}){3})){0}/((S{3}\((S{3}/PP_StringV{2}){3}/MutableField{1}){3}){3})){0}", (lambda $1 $2 $3 (doSeq ($1 $2) ($1 $3))) //tried to do: set subject to hello and body to see you
say,(S{0}/StringV{1}){0},(lambda $1 (say $1))
# using:
# using is like "and write", example: create new email using mom's email as the recipient, or create a contact for mom using mom@fd.com as the email
# this could have been more elegant by creating them automatically using a format like: using,"and set"...
using,"(((S{1}/PP_MutableField{3}){1}/StringV{2}){1}\S{0}){1}",(lambda $1 $2 $3 (doSeq $1(setFieldFromString $3 $2)))
using,"(((S{1}/PP_MutableField{3}){1}/FieldVal{2}){1}\S{0}){1}",(lambda $1 $2 $3 (doSeq $1(setFieldFromFieldVal $3 $2)))
#using, ((S{1}/StringV{2}){1}\S{0}){1},(lambda $1 $2 (doSeq $1 (setWhatFromString $2)))
#using, ((S{1}/Field{2}){1}\S{0}){1},(lambda $1 $2 (doSeq $1 (setWhatFromField $2)))
#
# The following are used to hint on the type but are actually ignored
#
"the value",StringV/StringV,(lambda $1 $1) //set subject to the value hello world
concept,ConceptName/ConceptName,(lambda $1 $1)
concept,StringN/StringN,(lambda $1 $1)
current,FiledName/FieldName,(lambda $ $1) //set the subject to current subject
field,FieldName/FieldName,(lambda $1 $1)
field,FieldName\FieldName,(lambda $1 $1) //set the subject field to hello
line,FieldName\FieldName,(lambda $1 $1) //set the subject line to hello
field,StringN/StringN,(lambda $1 $1) //add field email to concept contact
field,StringN\StringN,(lambda $1 $1) //add the email field to the concept contact
a,(StringN\StringN)/(StringN\StringN),(lambda $1 $1) //add email being a field to concept contact
as,(StringN\StringN)/(StringN\StringN),(lambda $1 $1) //add email as a field to concept contact 
instance,InstanceName/InstanceName,(lambda $1 $1)
instance,StringN/StringN,(lambda $1 $1) //create instance mom of concept contact
please,S{0}/S{0},(lambda $1 $1) //please do this
please,S{0}\S{0},(lambda $1 $1) //do this please
move,S{0}/S{0},(lambda $1 $1) //move to the next email
".",S{0}\S{0},(lambda $1 $1)
",",((S/S)\S)\((S/S)\S),(lambda $1 $1)
named,StringN/StringN,(lambda $1 $1) //create a contact named mom
#
# for learning new commands
#
command,Command{0},command
command,(Command{0}/StringN{1}){0}, (lambda $1 command) //ignore possible command name ("define new command go")
learned,(LastLearned{0}/Command{1}){0}, (lambda $1 learned) //mainly for undo previously learned command
previous,(LastLearned{0}/LastLearned{0}){0}, (lambda $1 learned)
#
# The following are specific from emails
#
body,FieldName{0},body,0 body
inbox,InstanceName{0},inbox
email_ambiguous,EmailAmbiguous{0},email
message,EmailAmbiguous{0}\EmailAmbiguous{0},(lambda $1 $1) //email message
outgoing,(InstanceName{0}/EmailAmbiguous{1}){0},(lambda $1 outgoing_email) //outgoing email
inbox,(InstanceName{0}/EmailAmbiguous{1}){0},(lambda $1 inbox) //inbox email
incoming,(InstanceName{0}/EmailAmbiguous{1}){0},(lambda $1 inbox) //incoming email
current,(InstanceName{0}/EmailAmbiguous{1}){0},(lambda $1 inbox) //current email
current,(FieldVal{0}/FieldName{1}){0},(lambda $1 (evalField (getProbFieldByInstanceNameAndFieldName inbox $1))) //current sender, current body
inbox,(InstanceName{0}\EmailAmbiguous{1}){0},(lambda $1 inbox) //email in inbox
email,ConceptName{0},outgoing_email,0 outgoing_email
recipient,FieldName{0},recipient_list,0 recipient_list
subject,FieldName{0},subject,0 subject
sender,FieldName{0},sender,0 sender
# added this, since I had to retrain if added later
email,FieldName{0},email
#
# The following were added just to support the examples
#
bob,InstanceName{0},bob,0 bob
zebra,ConceptName{0},zebra
classification,FieldName{0},classification
jane,InstanceName{0},jane
"my spouse",InstanceName{0},my_spouse
#
# These are added just for TestDataDriven
#
room,ConceptName{0},room
tables,FieldName{0},tables
ghc8114,InstanceName{0},ghc8114
#
# Added to support calendar events
#
event,ConceptName{0},calendar_event
event,InstanceName{0},calendar_event
save,"S{0}","(saveCalendarEvent)","0 saveCalendarEvent"
save,"S{0}/InstanceName","(lambda $1 (save $1))" 
#title,FieldName{0},title,0 title //using subject instead
description,FieldName{0},description,0 description
time,FieldName{0},date_and_time,0 date_and_time
date,FieldName{0},date_and_time,0 date_and_time
"date and time",FieldName{0},date_and_time,0 date_and_time
participants,FieldName{0},participant_list,0 participant_list
participant,FieldName{0},participant_list,0 participant_list
duration,FieldName{0},duration,0 duration
#
# added for Sugilite scripts
#
demonstrate,S{0},(demonstrate)
click,(S{0}/StringN{1}){0},(lambda $1 (sugExecClick $1))
click,actionType{0},actionType,0 actionType
#
# forget everything
#
forget, (S{0}/Everything{1}){0}, (lambda $1 (forgetAllLearned))
all, (Everything{0}/Everything{1}){0}, (lambda $1 $1)
everything, Everything{0}, "everything"
#
# accessories (music, spell, news)
#
play, (S{0}/StringV{1}){0}, (lambda $1 (searchYoutube $1))
spell, (S{0}/StringN{1}){0}, (lambda $1 (spell $1))
news, (S{0}/StringN{1}){0}, (lambda $1 (getNewsGuardian $1))
news, (S{0}\StringN{1}){0}, (lambda $1 (getNewsGuardian $1))
news, S{0}, (getNewsGuardian ~"world~")
question, (S{0}/StringV{1}){0}, (lambda $1 (getAnswerToFactoid $1))
#
# time, alarm, timer
#
time, TimeType, ~"time~"
date, TimeType, ~"date~"
alarm, AlarmTimerType, ~"alarm~"
alarms, AlarmTimerType, ~"alarm~"
timer, AlarmTimerType, ~"timer~"
timers, AlarmTimerType, ~"timer~"
all, (AlarmTimerType{0}/AlarmTimerType{1}){0}, (lambda $1 $1)
provide, (S{0}/TimeType{1}){0}, (lambda $1 (timeFuncs ~"read~" $1 ~"~" ~"~")) //provide the time
read, (S{0}/AlarmTimerType{1}){0}, (lambda $1 (timeFuncs ~"read~" $1 ~"~" ~"~"))
"set an alarm", (S{0}/StringN{1}){0}, (lambda $1 (timeFuncs ~"setAlarm~" $1 ~"~" ~"~"))
"set a timer", (S{0}/StringN{1}){0}, (lambda $1 (timeFuncs ~"setTimer~" $1 ~"~" ~"~"))
message, (AlarmMessage{0}/StringV{1}){0}, (lambda $1 $1)
to, (AlarmMessage{0}/StringV{1}){0}, (lambda $1 $1)
"set an alarm", ((S{0}/AlarmMessage{1}){0}/StringN{2}){0}, (lambda $1 $2 (timeFuncs ~"setAlarm~" $1 $2 ~"~"))
"set a timer", ((S{0}/StringN{1}){0}/AlarmMessage{2}){0}, (lambda $1 $2 (timeFuncs ~"setTimer~" $1 $2 ~"~"))
cancel, (S{0}/AlarmTimerType{1}){0}, (lambda $1 (timeFuncs ~"delAll~" $1 ~"~" ~"~"))
cancel, ((S{0}/AlarmTimerType{1}){0}/StringN{2}){0}, (lambda $1 $2 (timeFuncs ~"del~" $2 $1 ~"~"))
remind, ((S{0}/StringN{1}){0}/AlarmMessage{2}){0}, (lambda $1 $2 (timeFuncs ~"setTimer~" $2 $1 ~"false~"))
remind, ((S{0}/AlarmMessage{2}){0}/StringN{1}){0}, (lambda $1 $2 (timeFuncs ~"setTimer~" $1 $2 ~"false~"))
#
# numbers
#
one, Number, ~"one~"
two, Number, ~"two~"
three, Number, ~"three~"
plus, (S\Number)/Number, (lambda $1 $2 (plusAction $1 $2))